---
title: "Exploratory data analysis"
author:
  - name: "Paweł Wiczling*"
    affiliations:
      - name: "Department of Biopharmaceutics and Pharmacodynamics, Medical University of Gdańsk, Gen. J. Hallera 107, 80-416 Gdańsk, Poland"
date: "`r format(Sys.Date())`"
format:
  html:
    theme: cosmo
    toc: true
    code-fold: true  
    code-tools: true
    fig-width: 7
    fig-height: 7
knitr:
  opts_chunk: 
    dev: "ragg_png"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(cache=FALSE, message=FALSE, error=FALSE, warning=FALSE, comment=NA, out.width='95%')
```

# Introductions

Exploratory data analysis

# Setup
```{r message=FALSE}
library(cmdstanr)
library(ggplot2)
library(gridExtra)
library(patchwork)
library(rstan)
library(tidyr)
library(dplyr)
library(purrr)
library(posterior)
library(bayesplot)
library(GGally)
library(reshape2)
library(pracma)
library(brms)
library(here)
library(magick)
library(ggcorrplot)

select<-dplyr::select
#remotes::install_github("metrumresearchgroup/mrgmisc")
set_cmdstan_path("C:/Users/GUMed/.cmdstan/cmdstan-2.36.0")
set.seed(10271998) ## not required but assures repeatable results

source("helper-functions.R")
```

```{r settings}
data_deliv_dir = here::here("data","deliv")
data_derived_dir = here::here("data","derived")
if(!file.exists(data_deliv_dir)) dir.create(data_deliv_dir, recursive = T)
if(!file.exists(data_derived_dir)) dir.create(data_derived_dir, recursive = T)

figures_eda_dir <- here::here("deliv","figures", "eda")
tables_eda_dir <- here::here("deliv","tables", "eda")
if(!file.exists(figures_eda_dir)) dir.create(figures_eda_dir, recursive = T)
if(!file.exists(tables_eda_dir)) dir.create(tables_eda_dir, recursive = T)

model_dir <- here::here("model","stan")  
figures_dir <- here::here("deliv","figures", "stan")
tables_dir <- here::here("deliv","tables", "stan")
if(!file.exists(figures_dir)) dir.create(figures_dir, recursive = T)
if(!file.exists(model_dir)) dir.create(model_dir, recursive = T)
if(!file.exists(tables_dir)) dir.create(tables_dir, recursive = T)
```

## Load data
```{r load-data, message=FALSE, warning=FALSE}
data <- read.csv(here(data_deliv_dir, "database_logk_1026.csv"), header = TRUE)
analytes_names  <- read.csv(here(data_deliv_dir,"database_logk_1026_analyte_names.csv"), header = TRUE)
smiles <- read.csv(here(data_deliv_dir,"smiles1026.smi"), sep = "\t", header = FALSE)
data_ACD = read.csv(here(data_deliv_dir,'ACD_pKas.csv'))
data_pH <- read.csv(here(data_deliv_dir,"pH.csv"),header = TRUE)

data_ACD$logP =data %>% distinct(ID, .keep_all = TRUE) %>% pull(logP_ACD)
data_ACD$MW =data %>% distinct(ID, .keep_all = TRUE) %>% pull(MW_ACD)
data_ACD$logP[526] = mean(data_ACD$logP, na.rm = TRUE)

similarity_ltri_rcdk_df <- read.csv(file = here(data_deliv_dir,"similarity_ltri_rcdk.csv"), header = TRUE)
similarity_matrix <- make_similarity_matrix_fun(similarity_ltri_rcdk_df)

fg_df = read.csv(file = here(data_deliv_dir,"smarts_functional_groups.csv"), header = TRUE)
descriptor_df <- read.csv(file = here(data_deliv_dir,"descriptor_df.csv"), header = TRUE)

smiles<-smiles %>% rename(ID=V2,smiles=V1) %>% select(ID,smiles)
smiles$smiles[905] = "CN(C1CCCCC1N1CCCC1)C(=O)Cc1ccc(c(c1)Cl)Cl" # remove tartrate moiety 
smiles$smiles[425] = "CC(Cc1ccc(cc1)OCC(=O)O)NCC(c1cccc(c1)Cl)O" # remove Na+ and dissociation
smiles$smiles[501] = "c1ccc(cc1)C1(c2ccccc2)C(=O)NC(=N1)O"
smiles$smiles[401]= "CC(C)(C)c1c(CC(C(=O)[OH])[NH2])c(=O)[nH]o1"
smiles$smiles[686] = "CCCCCCCCCCCCCCCC(=O)OC(CC(=O)[OH])C[N+](C)(C)C"
smiles$smiles[901] = "CCOC(=Nc1c[n+](no1)N1CCOCC1)[OH]"

analytes_names$Analyte <- iconv(analytes_names$Analyte, from = "", to = "UTF-8", sub = "byte")

# dissociated groups at low pH
dissociated_groups <- c(
  # Anions
  "Sulfonic_acid", "Sulfinic_acid", "Sulfenic_acid", "Sulfuric_acid", "Sulfuric_monoester",
  "Phosphonic_acid", "Phosphoric_acid", "Phosphoric_monoester", "Phosphinic_acid",
  "Phosphonous_acid", "Phosphinous_acid", "Carbothioic_acid", "Carbodithioic_acid",
  # Cations
  "Primary_aliph_amine", "Secondary_aliph_amine", "Tertiary_aliph_amine", 
  "Quaternary_aliph_ammonium", "Primary_arom_amine", "Secondary_arom_amine", 
  "Tertiary_arom_amine", "Quaternary_arom_ammonium", "Secondary_mixed_amine", 
  "Tertiary_mixed_amine", "Quaternary_mixed_ammonium", "Oxonium", 
  "Immonium", "Sulfonium", "Phosphonium", "Hetero_N_basic_H", "Hetero_N_basic_no_H", "Amidine", "Guanidine", "Hydrazine", "Hydroxylamine", 
  "Diazonium", "N-Oxide"
)
```

## Prepare data
```{r prepare-data, message=FALSE, warning=FALSE}
data<-data %>%
  left_join(analytes_names)

functional_groups = fg_df%>%select(where(~ is.character(.) || !all(. == 0, na.rm = TRUE))) %>%
  select(-id1,-id2,-SMILES, -Anion, -Kation,-Ammonium )
functional_groups_names<- colnames(functional_groups)
totalnrgroups <- summarise_each(functional_groups, funs(sum))

dissociation = list(
pKaslit = data_ACD[,3:5],           # pKa values as predicted by ACD
pKasliterror = data_ACD[,17:19],    # pKa error as predicted by ACD
chargesA = abs(data_ACD[,9:12]),    # number of ionized groups (anions)
chargesB = abs(data_ACD[,13:16]))   # number of ionized groups (cations)
dissociation$charges = dissociation$chargesA+dissociation$chargesB                  # absolute charge
dissociation$groupsA = (dissociation$chargesA[,2:4]-dissociation$chargesA[,1:3])         # acidic group
dissociation$groupsB = -(dissociation$chargesB[,2:4]-dissociation$chargesB[,1:3])        # basic group
dissociation$R = rowSums(data_ACD[,3:5]<14) # number of dissociation steps
dissociation$groups = dissociation$groupsB-dissociation$groupsA
dissociation$logPobs =data_ACD$logP
dissociation$MW =data_ACD$MW
# identify acidic groups
dissociation$idxGroupsA <-which(dissociation$groupsA!=0,arr.ind = T)
dissociation$nGroupsA <- nrow(dissociation$idxGroupsA)
dissociation$pKaslitA<-dissociation$pKaslit[dissociation$idxGroupsA]
# identify basic groups
dissociation$idxGroupsB <-which(dissociation$groupsB!=0,arr.ind = T)
dissociation$nGroupsB <- nrow(dissociation$idxGroupsB)
dissociation$pKaslitB<-dissociation$pKaslit[dissociation$idxGroupsB]
# groups dissociated in the whole pH range
dissociation$chargesA0 <- dissociation$chargesA[,1]
dissociation$chargesB0 <- dissociation$chargesB[,max(dissociation$R)]
dissociation$idxA0 = c(which(dissociation$chargesA0==1), which(dissociation$chargesA0==2))
dissociation$idxB0 = c(which(dissociation$chargesB0==1), which(dissociation$chargesB0==2))
dissociation$nA0 <- length(dissociation$idxA0)
dissociation$nB0 <- length(dissociation$idxB0)
```

# Some plots
## Raw data
```{r raw-data, message=FALSE, warning=FALSE}
figure_S1 <- ggplot(data, aes(x=fi, y=logk, group=ID)) + 
  geom_line() + 
  labs(x = "\u03C6", y = expression(logk[obs])) + 
  theme_gray(base_size = 14) + theme(legend.position="none") 
```
## pH changes

The pH value of the mobile phase was verified experimentally for the purpose of this work. It equaled 2.66 with a standard deviation of 0.19 for the range of acetonitrile contents from 5 to 95%.

```{r pH-plot, message=FALSE, warning=FALSE}
ggplot(data=data_pH, aes(x=fi, y=pH)) + labs(x = "\u03C6", y = "pH") + 
  geom_point() + geom_hline(yintercept=mean(data_pH$pH), color = "red") +
  geom_hline(yintercept=mean(data_pH$pH)-sd(data_pH$pH), linetype="dashed", color = "red") +
  geom_hline(yintercept=mean(data_pH$pH)+sd(data_pH$pH), linetype="dashed", color = "red") + 
  ylim(c(2.0,3.5))
```

## logP and Moleculr mass distribution

```{r hist-MW-logP,message=FALSE, warning=FALSE}

df <- data %>% distinct(ID, .keep_all = TRUE) 

p1<-ggplot(data=descriptor_df)+
    geom_histogram(aes(x=MolWt))+
  xlab("molecular mass")+
  ylab("count")

p2<-ggplot(data=descriptor_df)+
  geom_histogram(aes(x=LogP))+
  xlab("logP (rdkit)")+
  ylab("count")

p1+p2
```

## Functional groups

The summary of functional groups present in the analyzed compounds:

```{r fg, eval=TRUE}

# Function to classify functional groups
classify_dissociation <- function(key) {
  ifelse(key %in% dissociated_groups, "Dissociated", "Not Dissociated")
}

sumdata=data.frame(value=apply(functional_groups,2,sum))
sumdata$key=functional_groups_names
sumdata <- sumdata[order(sumdata$value),]
sumdata$split <- c(1,1,rep(c(1,2,3),each=47))
sumdata$Dissociation_Status <- sapply(sumdata$key, classify_dissociation)
p1 <- ggplot(data=sumdata[which(sumdata$split==1),], aes(x=reorder(key, value), y=value, fill=key)) +
  geom_bar(fill="gray", stat="identity") + 
  theme(legend.position = "none",
        axis.title.x=element_blank(),
        axis.title.y=element_blank()) + 
  coord_flip()

p2 <- ggplot(data=sumdata[which(sumdata$split==2),], aes(x=reorder(key, value), y=value, fill=key)) +
  geom_bar(fill="gray", stat="identity") + 
  theme(legend.position = "none",
        axis.title.x=element_blank(),
        axis.title.y=element_blank()) + 
  coord_flip() + scale_y_continuous(trans='log10')

p3 <- ggplot(data=sumdata[which(sumdata$split==3),], aes(x=reorder(key, value), y=value, fill=key)) +
  geom_bar(fill="gray", stat="identity") + 
  theme(legend.position = "none",
        axis.title.x=element_blank(),
        axis.title.y=element_blank()) + 
  coord_flip() + scale_y_continuous(trans='log10')

p1
p2
p3
```

## Initial estimates
```{r initial-estimates}
init_aprox <- data %>%
  group_by(ID) %>%
  summarise(
    S1 = if_else(n() == 1,-16,polyfit(fi / (1 + 2 * fi), logk, 1)[1]),
    logkw = if_else(n() == 1,polyfit(-16 * fi / (1 + 2 * fi), logk, 0), 
                             polyfit(fi / (1 + 2 * fi), logk, 1)[2]),
    S2 = 2) %>%
  ungroup() %>%
  select(logkw, S2, S1) %>%
  mutate(S1 = -S1 / (1 + 2))
init_aprox$chargesB0 <-dissociation$chargesB0
init_aprox$chargesA0 <-dissociation$chargesA0

selected_columns <- which(colnames(functional_groups) %in% dissociated_groups)
functional_groups_dissociated <- functional_groups[, selected_columns, drop = FALSE]
values <- apply(functional_groups_dissociated, 1, sum)

colnames(functional_groups)[selected_columns]

init_aprox$fngr <- values>0

init_aprox$MW <-descriptor_df$MolWt
init_aprox$logPobs <- descriptor_df$LogP
```

### Visualize
```{r initial-estimates-plot}
p1 <- init_aprox %>%
  ggplot(aes(x=logkw,y=S1,color=factor(chargesB0+chargesA0)))+
  geom_point()+
  labs(color="charges")

p2<-init_aprox %>%
  ggplot(aes(x=logPobs,y=logkw,color=factor(chargesB0+chargesA0)))+
  geom_point()+
  labs(color="charges")

p3<-init_aprox %>%
  ggplot(aes(x=logPobs,y=S1,color=factor(chargesB0+chargesA0)))+
  geom_point()+
  labs(color="charges")

p1
p2+p3+ plot_layout(guides = "collect")
```
# Plot retention data for the most similar pairs of analytes
```{r plot-retention-examples}

plotting_i = function(i, .ilist) {
  data %>% 
    filter(ID %in% c(.ilist$row[i], .ilist$col[i])) %>%
    ggplot(aes(x = fi, y = logk, group = ID)) + 
    geom_line(aes(color = logP_ACD)) + 
    labs(
      title = paste(analytes_names$Analyte[.ilist$row[i]], "(", .ilist$col[i], ")", "\n",                                                      analytes_names$Analyte[.ilist$col[i]], "(", .ilist$row[i], ")"), 
      x = "\u03C6", 
      y = expression(log~k[obs])
    ) + 
    theme_gray(base_size = 10) + 
    theme(legend.position = "none")+
    theme(plot.title = element_text(size = 5), 
          axis.title = element_text(size = 7),
          axis.text = element_text(size = 5))
}

similarity_subset <- similarity_ltri_rcdk_df %>% filter(similarity>0.95, row!=col)

map(0*16+c(1:16), \(x) plotting_i(x, similarity_subset)) %>% wrap_plots(ncol = 4)
map(1*16+c(1:16), \(x) plotting_i(x, similarity_subset)) %>% wrap_plots(ncol = 4)
map(2*16+c(1:16), \(x) plotting_i(x, similarity_subset)) %>% wrap_plots(ncol = 4)
map(3*16+c(1:16), \(x) plotting_i(x, similarity_subset)) %>% wrap_plots(ncol = 4)
map(4*16+c(1:16), \(x) plotting_i(x, similarity_subset)) %>% wrap_plots(ncol = 4)
map(5*16+c(1:16), \(x) plotting_i(x, similarity_subset)) %>% wrap_plots(ncol = 4)
```

# Manuscript figures
```{r manuscript-figures}
ggsave(here::here("deliv","figures","manuscript","supplement ", "raw-data.png"),
       plot=figure_S1, width = 20, height = 20, units = "cm", dpi = 300)
ggsave(here::here("deliv","figures","manuscript","supplement", "raw-data.pdf"),
       plot=figure_S1, width = 20, height = 20, units = "cm", dpi = 300)
```

# Session info
```{r}
sessionInfo()
```