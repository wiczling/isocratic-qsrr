---
title: "Model 005"
author:
  - name: "Paweł Wiczling*"
    affiliations:
      - name: "Department of Biopharmaceutics and Pharmacodynamics, Medical University of Gdańsk, Gen. J. Hallera 107, 80-416 Gdańsk, Poland"
date: "`r format(Sys.Date())`"
format:
  html:
    theme: cosmo
    toc: true
    code-fold: true  
    code-tools: true
    fig-width: 7
    fig-height: 7
knitr:
  opts_chunk: 
    dev: "ragg_png"
---


# Introductions

Test t-matrix distributions

# Setup
```{r setup, message=FALSE}
knitr::opts_chunk$set(cache=FALSE, message=FALSE, error=FALSE, warning=FALSE, comment=NA, out.width='95%')

library(bbr)
library(bbr.bayes)
library(dplyr)
library(ggplot2)
library(patchwork)
library(gridExtra)
library(naniar)
library(knitr)
library(data.table)
library(tidyverse)
library(glue)
library(whisker)
library(here)
library(cmdstanr)
library(gridExtra)
library(posterior)
library(bayesplot)
library(tidybayes)
library(reshape2)
library(pracma)
library(mrgmisc)
library(GGally)
library(igraph)
library(ggraph)
library(ggcorrplot)
#remotes::install_github("metrumresearchgroup/mrgmisc")
set_cmdstan_path("C:/Users/GUMed/.cmdstan/cmdstan-2.36.0")
set.seed(10271998) ## not required but assures repeatable results
select<-dplyr::select
source("helper-functions.R")
```

```{r settings}
data_dir = here::here("data")
model_dir <- here::here("model","stan")  
figures_dir <- here::here("deliv","figures", "stan")
tables_dir <- here::here("deliv","tables", "stan")
if(!file.exists(figures_dir)) dir.create(figures_dir, recursive = T)
if(!file.exists(model_dir)) dir.create(model_dir, recursive = T)
if(!file.exists(tables_dir)) dir.create(tables_dir, recursive = T)

data_deliv_dir = here::here("data","deliv")
data_derived_dir = here::here("data","derived")
if(!file.exists(data_deliv_dir)) dir.create(data_deliv_dir, recursive = T)
if(!file.exists(data_derived_dir)) dir.create(data_derived_dir, recursive = T)

figures_eda_dir <- here::here("deliv","figures", "stan")
tables_eda_dir <- here::here("deliv","tables", "stan")
if(!file.exists(figures_eda_dir)) dir.create(figures_eda_dir, recursive = T)
if(!file.exists(tables_eda_dir)) dir.create(tables_eda_dir, recursive = T)
```


We used a publicly available [dataset](www.retentionprediction.org/hplc/database/) that comprises the measurements of RP-HPLC retention times collected for 1026 analytes. The retention times were measured under isocratic conditions on Eclipse Plus C18 (Agilent) stationary phase with 3.5 μm particles. The experiments were conducted using a mixture of two solvents: solvent A, which was made of 0.1% formic acid in water, and solvent B, which was made of 0.1% formic acid in acetonitrile. The column temperature was set at 35\^{\circ}C. The data were collected by Boswell et al. and were used to create a method to predict retention time by Back-Calculating the Gradient.

## Load data
```{r load-data, message=FALSE, warning=FALSE}
data <- read.csv(here(data_deliv_dir, "database_logk_1026.csv"), header = TRUE)
analytes_names  <- read.csv(here(data_deliv_dir,"database_logk_1026_analyte_names.csv"), header = TRUE)
smiles <- read.csv(here(data_deliv_dir,"smiles1026.smi"), sep = "\t", header = FALSE)

data_ACD = read.csv(here(data_deliv_dir,'ACD_pKas.csv'))
data_pH <- read.csv(here(data_deliv_dir,"pH.csv"),header = TRUE)

data_ACD$logP =data %>% distinct(ID, .keep_all = TRUE) %>% pull(logP_ACD)
data_ACD$MW =data %>% distinct(ID, .keep_all = TRUE) %>% pull(MW_ACD)
data_ACD$logP[526] = mean(data_ACD$logP, na.rm = TRUE)

fg_df = read.csv(file = here(data_deliv_dir,"smarts_functional_groups.csv"), header = TRUE)

descriptor_df <- read.csv(file = here(data_deliv_dir,"descriptor_df.csv"), header = TRUE)

similarity_ltri_rcdk_df <- read.csv(file = here(data_deliv_dir,"similarity_ltri_rcdk.csv"), header = TRUE)
similarity_matrix <- make_similarity_matrix_fun(similarity_ltri_rcdk_df)

smiles<-smiles %>% rename(ID=V2,smiles=V1) %>% select(ID,smiles)

smiles$smiles[905] = "CN(C1CCCCC1N1CCCC1)C(=O)Cc1ccc(c(c1)Cl)Cl" # remove tartrate moiety 
smiles$smiles[425] = "CC(Cc1ccc(cc1)OCC(=O)O)NCC(c1cccc(c1)Cl)O" # remove Na+ and dissociation
smiles$smiles[501] = "c1ccc(cc1)C1(c2ccccc2)C(=O)NC(=N1)O"
smiles$smiles[401]= "CC(C)(C)c1c(CC(C(=O)[OH])[NH2])c(=O)[nH]o1"
smiles$smiles[686] = "CCCCCCCCCCCCCCCC(=O)OC(CC(=O)[OH])C[N+](C)(C)C"
smiles$smiles[901] = "CCOC(=Nc1c[n+](no1)N1CCOCC1)[OH]"

analytes_names$Analyte <- iconv(analytes_names$Analyte, from = "", to = "UTF-8", sub = "byte")

# dissociated groups at low pH
dissociated_groups <- c(
  # Anions
  "Sulfonic_acid", "Sulfinic_acid", "Sulfenic_acid", "Sulfuric_acid", "Sulfuric_monoester",
  "Phosphonic_acid", "Phosphoric_acid", "Phosphoric_monoester", "Phosphinic_acid",
  "Phosphonous_acid", "Phosphinous_acid", "Carbothioic_acid", "Carbodithioic_acid",
  # Cations
  "Primary_aliph_amine", "Secondary_aliph_amine", "Tertiary_aliph_amine", 
  "Quaternary_aliph_ammonium", "Primary_arom_amine", "Secondary_arom_amine", 
  "Tertiary_arom_amine", "Quaternary_arom_ammonium", "Secondary_mixed_amine", 
  "Tertiary_mixed_amine", "Quaternary_mixed_ammonium", "Oxonium", 
  "Immonium", "Sulfonium", "Phosphonium", "Hetero_N_basic_H", "Hetero_N_basic_no_H", "Amidine", "Guanidine", "Hydrazine", "Hydroxylamine", 
  "Diazonium", "N-Oxide"
)
```

## Prepare data
```{r prepare-ACDLabs-data, message=FALSE, warning=FALSE}
data<-data %>%
  left_join(analytes_names) %>%
  mutate(mm_group =case_when(
             MW_ACD < 200 ~ "MM < 200",
             MW_ACD < 300 & MW_ACD >= 200 ~ "200 \u2264 MM < 300",
             MW_ACD < 400 & MW_ACD >= 300 ~ "300 \u2264 MM < 400",
             .default = "400 \u2264 MM"))

functional_groups = fg_df %>%
  select(where(~ is.character(.) || !all(. == 0, na.rm = TRUE))) %>%
  select(-c(id1,id2, SMILES, Anion, Kation, Ammonium))

functional_groups_names<- colnames(functional_groups)
totalnrgroups <- summarise_each(functional_groups, funs(sum))

dissociation = list(
pKaslit = data_ACD[,3:5],           # pKa values as predicted by ACD
pKasliterror = data_ACD[,17:19],    # pKa error as predicted by ACD
chargesA = abs(data_ACD[,9:12]),    # number of ionized groups (anions)
chargesB = abs(data_ACD[,13:16]))   # number of ionized groups (cations)
dissociation$charges = dissociation$chargesA+dissociation$chargesB                  # absolute charge
dissociation$groupsA = (dissociation$chargesA[,2:4]-dissociation$chargesA[,1:3])         # acidic group
dissociation$groupsB = -(dissociation$chargesB[,2:4]-dissociation$chargesB[,1:3])        # basic group
dissociation$R = rowSums(data_ACD[,3:5]<14) # number of dissociation steps
dissociation$groups = dissociation$groupsB-dissociation$groupsA
dissociation$logPobs =data_ACD$logP
dissociation$MW =data_ACD$MW
# identify acidic groups
dissociation$idxGroupsA <-which(dissociation$groupsA!=0,arr.ind = T)
dissociation$nGroupsA <- nrow(dissociation$idxGroupsA)
dissociation$pKaslitA<-dissociation$pKaslit[dissociation$idxGroupsA]
# identify basic groups
dissociation$idxGroupsB <-which(dissociation$groupsB!=0,arr.ind = T)
dissociation$nGroupsB <- nrow(dissociation$idxGroupsB)
dissociation$pKaslitB<-dissociation$pKaslit[dissociation$idxGroupsB]
# groups dissociated in the whole pH range
dissociation$chargesA0 <- dissociation$chargesA[,1]
dissociation$chargesB0 <- dissociation$chargesB[,max(dissociation$R)]
dissociation$idxA0 = c(which(dissociation$chargesA0==1), which(dissociation$chargesA0==2))
dissociation$idxB0 = c(which(dissociation$chargesB0==1), which(dissociation$chargesB0==2))
dissociation$nA0 <- length(dissociation$idxA0)
dissociation$nB0 <- length(dissociation$idxB0)

```

## Initial estimates
```{r initial-estimates}
init_aprox <- data %>%
  group_by(ID) %>%
  summarise(
    S1 = if_else(n() == 1,-16,polyfit(fi / (1 + 2 * fi), logk, 1)[1]),
    logkw = if_else(n() == 1,polyfit(-16 * fi / (1 + 2 * fi), logk, 0), 
                             polyfit(fi / (1 + 2 * fi), logk, 1)[2]),
    S2 = 2) %>%
  ungroup() %>%
  select(logkw, S2, S1) %>%
  mutate(S1 = -S1 / (1 + 2))
```

# Data analysis
## Model
The data was analyzed using a the following model:

$$
\begin{aligned}
& logk_{i,j}  = logkw_{i} - S_{1,i} \cdot (1 + S_{2}) \cdot \varphi_{i,j} / (1 + S_{2} \cdot \varphi_{i,j})
\end{aligned}
$$

The statistical model has the following structure (hierarchical model):

$$ 
\begin{aligned}
& \log k_{obs_{i,j}} \sim student_t(\nu_{obs},logk_{i,j},\sigma) \\
& R_{i} \sim \text{MN}(\theta_R  + \beta \cdot log P_i +\pi_R \cdot X_i , K, \Omega_\nu) \\
& \Omega_{\nu} \sim IW(\Omega,\nu) \\
& \pi_{R,k} \sim N(0,\kappa_R)
\end{aligned}
$$
where $R_i=(logkw_{i}, S_{1,i})$ is a vector of subject-specific parameters, $logk_{i,j}$ corresponds to the above Neue equation, $MN$ is a matrix normal distribution, $\theta_R$ is a vector of typical values of $R_i$, $\beta_R$ is a vector of slopes between $R_i$ and $logP_i$, and $\pi_R$ is a vector of slopes between $R_i$ and functional group vector $Xi$. In turn, $\sigma$ is the scale of the residuals, $K$ and $\Omega$ are the scale matrix for unexplained between-analyte variabilities $\Omega$ and $K$ were decomposed to:

$$
\begin{aligned}
\Omega_1 = diag(\omega) \cdot LL' \cdot diag(\omega) \\
K = S* \alpha + (1-\alpha)*I \\
\end{aligned}
$$

where $LL'$ denotes correlation a correlation matrix, $\omega$ denotes standard deviation for between analyte variability, S is a similarity matrix and I is an Identify matrix.

## Priors

The priors were specified as follows:

$$ 
\begin{aligned}
& \theta_{logkw} \sim normal(2, 4), \\
& \theta_{S1} \sim normal(4, 2), \\
& \theta_{S2} \sim lognormal(0.693, 0.125), \\
& \nu_{obs} = 7,\\
& \omega_{logkw},\omega_{S1} \sim normal_+(0, 1), \\
& \beta_{logkw} \sim  normal(0.7, 0.125), \\
& \beta_{S1} \sim  normal(0.5, 0.125), \\
& \kappa_{logkw},\kappa_{S1} \sim  normal(0, 0.1), \\
& \sigma \sim normal_+(0,0.05), \\
& \alpha \sim normal(0.5,0.25)T[0,1], \\
& \nu_{obs} \sim gamma(2,0.1), \\
& p(LL') \propto LKJ(2) \cdot \Pi_u N(c_u, 0.125), \\
& c_u = [0.75]
\end{aligned}
$$

LKJ(2) ensure that the density is uniform over correlation matrices of order 2 and u denotes the unique lower triangular elements of correlation matrix (<http://srmart.in/informative-priors-for-correlation-matrices-an-easy-approach/>)

# Stan

Multilevel modeling was performed in [Stan software](https://mc-stan.org/) linked with R/ [cmdstanr](https://mc-stan.org/cmdstanr/). For the inference we used 500 iterations, 1000 warmup iterations, and 8 Markov chains. The reduce_sum function was selected to accelerate the calculations. It works by parallelizing the execution of a single Stan chain across multiple cores. Convergence diagnostics were checked using Gelman−Rubin statistics and trace plots.

### Initialize variables and parameters

```{r stan-setup}
# create Stan data set: data
# create Stan data set: data
nObs <- length(data$ID)
nAnalytes <- length(unique(data$ID))
start <- (1:nObs)[!duplicated(data$ID)]
end <- c(start[-1] - 1, nObs)
nK = ncol(functional_groups)

idx_diss = which(functional_groups_names %in% dissociated_groups)
idx_nondiss = which(functional_groups_names %notin% dissociated_groups)

datastruct <- with(data,
                  list(nAnalytes=length(unique(data$ID)),
                       nfg_diss = length(idx_diss),
                       nfg_nondiss = length(idx_nondiss),
                       idx_diss = idx_diss,
                       idx_nondiss = idx_nondiss,
                       nObs=length(data$ID),
                       analyte=match(data$ID, unique(data$ID)),
                       fi=data$fi,
                       logPobs=descriptor_df$LogP,
                       nK = nK,
                       fgrp = functional_groups,
                       start = start,
                       end= end,
                       logkobs=logk,
                       run_estimation=1))

# initialize the values for each variable in each chain:
init <- function(){
  list(   logkwHat  = rnorm(1,2,2),
          S1Hat    = rnorm(1,5,1),
          dlogkwHat  = rnorm(1,-1,0.5),
          dS1Hat    = rnorm(1,0,0.5),
          S2Hat = 2*exp(rnorm(1,0,0.125)),
          beta  = rnorm(2,c(0.7,0.5),c(0.125,0.5)),
          omega = c(1,1)*exp(rnorm(2, 0, 0.5)),
          rho =  matrix(c(1,0.75,0.75,1), nrow=2),
          L_Omega_W = t(chol(matrix(c(1,0.75,0.75,1), nrow=2))),
          param = cbind(init_aprox$logkw,init_aprox$S1),
          alpha = max(0,min(1,rnorm(1,0.5,0.25))),
          pilogkw = rep(0,nK),
          nu = max(3,rgamma(1,2,0.1)),
          piS1 = rep(0,nK),
          sdpi = c(0.1,0.1,0.1,0.1)* exp(rnorm(4,0,0.1)),
          sigma  =  0.05*exp(rnorm(1, 0, 0.5))
  )
}
```

### Fitting the model
We compiled the model using cmdstanr:
```{r mod-settings}
model_name <- "mod5"
model_name_ext <- paste0(model_name,".stan")

#' folder shortcuts:
mod_figures_dir <- here::here("deliv", "figures", model_name)
mod_tabels_dir  <- here::here("deliv", "tables", model_name)
mod_model_dir   <- here::here("model", "stan", model_name)
mod_output_dir   <- here::here("model", "stan", model_name, "output")

if (!file.exists(mod_figures_dir)) dir.create(mod_figures_dir)
if (!file.exists(mod_tabels_dir)) dir.create(mod_tabels_dir)
if (!file.exists(mod_model_dir)) dir.create(mod_model_dir)
if (!file.exists(mod_output_dir)) dir.create(mod_output_dir)

modelqg_name <- paste0(model_name,"gq")
modelqg_name_ext <- paste0(modelqg_name,".stan")
modgq_model_dir   <- here::here("model", "stan", modelqg_name)
modgq_output_dir   <- here::here("model", "stan", modelqg_name, "output")

if (!file.exists(modgq_model_dir)) dir.create(modgq_model_dir)
if (!file.exists(modgq_output_dir)) dir.create(modgq_output_dir)
```

```{r stan-compile, eval = FALSE}
mod5 <- cmdstan_model(here::here(mod_model_dir, model_name_ext), stanc_options = list("O1"))
```

We used optimization for initial testing:

```{r stan-optimize, eval = FALSE}
fit_opt <- mod5$optimize(
  data = datastruct,
  output_dir = mod_output_dir,
  output_basename = "mod5-opt",
  init = init,
  iter=3000
)

fit_opt$print(variables = c("logkwHat","S1Hat","dlogkwHat","dS1Hat","beta","S2Hat","omega","rho[1,2]","sigma","sdpi","nu"), max_rows=16)
```


For local computations one can use cmdstanr:

```{r stan-sample, eval = FALSE}
 fit <- mod5$sample(
   data = datastruct,
   output_dir = mod_output_dir,
   output_basename = "mod5",
   init = init,
   iter_warmup = 1000,
   iter_sampling = 500,
   chains = 8,
   parallel_chains = 8,
   refresh = 100,
   adapt_delta=0.9
 )
```

We performed out computations at the Academic Computer Center in Gdańsk, [Tryton Cluster](https://docs.task.gda.pl/kdm/zasoby-sprzetowe/tryton/). In this case:

1.  we dumped the necessary data to .json format

```{r dump-files, eval = FALSE}
write_stan_json(datastruct, paste0(mod_model_dir,"/standata.json"), always_decimal = FALSE)
write_stan_json(init(), paste0(mod_model_dir,"/init-1.json"), always_decimal = FALSE)
write_stan_json(init(), paste0(mod_model_dir,"/init-2.json"), always_decimal = FALSE)
write_stan_json(init(), paste0(mod_model_dir,"/init-3.json"), always_decimal = FALSE)
write_stan_json(init(), paste0(mod_model_dir,"/init-4.json"), always_decimal = FALSE)
write_stan_json(init(), paste0(mod_model_dir,"/init-5.json"), always_decimal = FALSE)
write_stan_json(init(), paste0(mod_model_dir,"/init-6.json"), always_decimal = FALSE)
write_stan_json(init(), paste0(mod_model_dir,"/init-7.json"), always_decimal = FALSE)
write_stan_json(init(), paste0(mod_model_dir,"/init-8.json"), always_decimal = FALSE)
```

2.  we run the model using the batch file:

```{=html}
<pre> 
</pre>
```

3.  After calculations, we loaded the output files using cmdstanr. 

```{r stan-load}
fit <- cmdstanr::as_cmdstan_fit(c(
                                  paste0(mod_output_dir,"/",  model_name, "-1.csv"),
                                  paste0(mod_output_dir,"/",  model_name, "-2.csv"),
                                  paste0(mod_output_dir,"/",  model_name, "-3.csv"),
                                  paste0(mod_output_dir,"/",  model_name, "-4.csv"),
                                  paste0(mod_output_dir,"/",  model_name, "-5.csv"),
                                  paste0(mod_output_dir,"/",  model_name, "-6.csv"),
                                  paste0(mod_output_dir,"/",  model_name, "-7.csv"),
                                  paste0(mod_output_dir,"/",  model_name, "-8.csv")
                                ))
```

4.  finally we checked the diagnostics of Monte Carlo inferences based on the Stan documentation described herein [diagnose](https://mc-stan.org/docs/cmdstan-guide/diagnose.html)

```{r stan-diagnose, eval = FALSE}
 #fit$cmdstan_diagnose()
 setwd(mod_output_dir)
 str = paste0(cmdstan_path(), '/bin/diagnose  mod5-*.csv')
 system(str,intern=TRUE)
```

The diagnostics are reasonable given model complexity. Output copied here to save time:

```{=html}
<pre>
</pre>
```

## Summary of model parameters (table):

The [stansummary](https://mc-stan.org/docs/cmdstan-guide/stansummary.html) function was used to report summary and diagnostic statistics over model parameters. 

```{r summary}
fit$print(variables = c("logkwHat","S1Hat","dlogkwHat","dS1Hat", "beta","S2Hat","omega","rho[1,2]","sigma","sdpi", "nu"), max_rows=16)
```

## Trace plots

Trace plots are time series plots of Markov chains. Here we show standard trace plots for several parameters

```{r trace-plots, include=TRUE}
bayesplot::mcmc_trace(fit$draws(c("logkwHat","S1Hat","beta","S2Hat"))) 
bayesplot::mcmc_trace(fit$draws(c("omega","rho[1,2]","sigma","sdpi"))) 
```

## Summary of model parameters (figures)

```{r mcmc-intervals}
mcmc_intervals(fit$draws(c("logkwHat","S1Hat","beta","S2Hat")))
mcmc_intervals(fit$draws(c("omega","sigma","sdpi")))
```


# Session info

```{r}
sessionInfo()
```